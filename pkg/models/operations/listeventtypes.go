// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/calendly-go-sdk/pkg/models/shared"
	"net/http"
)

type ListEventTypesRequest struct {
	// Return only active event types if true, only inactive if false, or all event types if this parameter is omitted.
	Active *bool `queryParam:"style=form,explode=true,name=active"`
	// Return only admin managed event types if true, exclude admin managed event types if false, or include all event types if this parameter is omitted.
	AdminManaged *bool `queryParam:"style=form,explode=true,name=admin_managed"`
	// The number of rows to return
	Count *float64 `queryParam:"style=form,explode=true,name=count"`
	// View available personal, team, and organization event types associated with the organization's URI.
	Organization *string `queryParam:"style=form,explode=true,name=organization"`
	// The token to pass to get the next or previous portion of the collection
	PageToken *string `queryParam:"style=form,explode=true,name=page_token"`
	// Order results by the specified field and direction. Accepts comma-separated list of {field}:{direction} values.
	// Supported fields are: name.
	// Sort direction is specified as: asc, desc.
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// View available personal, team, and organization event types associated with the user's URI.
	User *string `queryParam:"style=form,explode=true,name=user"`
}

type ListEventTypes403ApplicationJSONMessageEnum string

const (
	ListEventTypes403ApplicationJSONMessageEnumThisUserIsNotInYourOrganization            ListEventTypes403ApplicationJSONMessageEnum = "This user is not in your organization"
	ListEventTypes403ApplicationJSONMessageEnumYouDoNotHavePermission                     ListEventTypes403ApplicationJSONMessageEnum = "You do not have permission"
	ListEventTypes403ApplicationJSONMessageEnumYouDoNotHavePermissionToAccessThisResource ListEventTypes403ApplicationJSONMessageEnum = "You do not have permission to access this resource."
)

func (e *ListEventTypes403ApplicationJSONMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "This user is not in your organization":
		fallthrough
	case "You do not have permission":
		fallthrough
	case "You do not have permission to access this resource.":
		*e = ListEventTypes403ApplicationJSONMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventTypes403ApplicationJSONMessageEnum: %s", s)
	}
}

type ListEventTypes403ApplicationJSONTitleEnum string

const (
	ListEventTypes403ApplicationJSONTitleEnumPermissionDenied ListEventTypes403ApplicationJSONTitleEnum = "Permission Denied"
)

func (e *ListEventTypes403ApplicationJSONTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Permission Denied":
		*e = ListEventTypes403ApplicationJSONTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListEventTypes403ApplicationJSONTitleEnum: %s", s)
	}
}

// ListEventTypes403ApplicationJSON - Permission Denied
type ListEventTypes403ApplicationJSON struct {
	Message *ListEventTypes403ApplicationJSONMessageEnum `json:"message,omitempty"`
	Title   *ListEventTypes403ApplicationJSONTitleEnum   `json:"title,omitempty"`
}

type ListEventTypesErrorResponseDetails struct {
	Message   string  `json:"message"`
	Parameter *string `json:"parameter,omitempty"`
}

// ListEventTypesErrorResponse - Error Object
type ListEventTypesErrorResponse struct {
	Details []ListEventTypesErrorResponseDetails `json:"details,omitempty"`
	Message string                               `json:"message"`
	Title   string                               `json:"title"`
}

// ListEventTypes200ApplicationJSON - Service response
type ListEventTypes200ApplicationJSON struct {
	Collection []shared.EventType `json:"collection"`
	Pagination shared.Pagination  `json:"pagination"`
}

type ListEventTypesResponse struct {
	ContentType string
	// Request is not valid
	ErrorResponse *ListEventTypesErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// OK
	ListEventTypes200ApplicationJSONObject *ListEventTypes200ApplicationJSON
	// Permission Denied
	ListEventTypes403ApplicationJSONObject *ListEventTypes403ApplicationJSON
}
