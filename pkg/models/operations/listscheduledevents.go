// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/calendly-go-sdk/pkg/models/shared"
	"net/http"
)

// ListScheduledEventsStatusEnum - Whether the scheduled event is `active` or `canceled`
type ListScheduledEventsStatusEnum string

const (
	ListScheduledEventsStatusEnumActive   ListScheduledEventsStatusEnum = "active"
	ListScheduledEventsStatusEnumCanceled ListScheduledEventsStatusEnum = "canceled"
)

func (e *ListScheduledEventsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "canceled":
		*e = ListScheduledEventsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListScheduledEventsStatusEnum: %s", s)
	}
}

type ListScheduledEventsRequest struct {
	// The number of rows to return
	Count *float64 `queryParam:"style=form,explode=true,name=count"`
	// Return events that are scheduled with the invitee associated with this email address
	InviteeEmail *string `queryParam:"style=form,explode=true,name=invitee_email"`
	// Include events with start times prior to this time (sample time format: "2020-01-02T03:04:05.678123Z"). This time should use the UTC timezone.
	MaxStartTime *string `queryParam:"style=form,explode=true,name=max_start_time"`
	// Include events with start times after this time (sample time format: "2020-01-02T03:04:05.678123Z"). This time should use the UTC timezone.
	MinStartTime *string `queryParam:"style=form,explode=true,name=min_start_time"`
	// Return events that are scheduled with the organization associated with this URI
	Organization *string `queryParam:"style=form,explode=true,name=organization"`
	// The token to pass to get the next or previous portion of the collection
	PageToken *string `queryParam:"style=form,explode=true,name=page_token"`
	// Order results by the specified field and direction. Accepts comma-separated list of {field}:{direction} values.
	// Supported fields are: start_time.
	// Sort direction is specified as: asc, desc.
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Whether the scheduled event is `active` or `canceled`
	Status *ListScheduledEventsStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// Return events that are scheduled with the user associated with this URI
	User *string `queryParam:"style=form,explode=true,name=user"`
}

type ListScheduledEvents403ApplicationJSONMessageEnum string

const (
	ListScheduledEvents403ApplicationJSONMessageEnumYouDoNotHavePermissionToAccessThisResource                                      ListScheduledEvents403ApplicationJSONMessageEnum = "You do not have permission to access this resource."
	ListScheduledEvents403ApplicationJSONMessageEnumPleaseAlsoSpecifyOrganizationWhenRequestingEventsForAUserWithinYourOrganization ListScheduledEvents403ApplicationJSONMessageEnum = "Please also specify organization when requesting events for a user within your organization."
	ListScheduledEvents403ApplicationJSONMessageEnumThisUserIsNotInYourOrganization                                                 ListScheduledEvents403ApplicationJSONMessageEnum = "This user is not in your organization"
	ListScheduledEvents403ApplicationJSONMessageEnumYouDoNotHavePermission                                                          ListScheduledEvents403ApplicationJSONMessageEnum = "You do not have permission"
)

func (e *ListScheduledEvents403ApplicationJSONMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "You do not have permission to access this resource.":
		fallthrough
	case "Please also specify organization when requesting events for a user within your organization.":
		fallthrough
	case "This user is not in your organization":
		fallthrough
	case "You do not have permission":
		*e = ListScheduledEvents403ApplicationJSONMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListScheduledEvents403ApplicationJSONMessageEnum: %s", s)
	}
}

type ListScheduledEvents403ApplicationJSONTitleEnum string

const (
	ListScheduledEvents403ApplicationJSONTitleEnumPermissionDenied ListScheduledEvents403ApplicationJSONTitleEnum = "Permission Denied"
)

func (e *ListScheduledEvents403ApplicationJSONTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Permission Denied":
		*e = ListScheduledEvents403ApplicationJSONTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ListScheduledEvents403ApplicationJSONTitleEnum: %s", s)
	}
}

// ListScheduledEvents403ApplicationJSON - Permission Denied
type ListScheduledEvents403ApplicationJSON struct {
	Message *ListScheduledEvents403ApplicationJSONMessageEnum `json:"message,omitempty"`
	Title   *ListScheduledEvents403ApplicationJSONTitleEnum   `json:"title,omitempty"`
}

type ListScheduledEventsErrorResponseDetails struct {
	Message   string  `json:"message"`
	Parameter *string `json:"parameter,omitempty"`
}

// ListScheduledEventsErrorResponse - Error Object
type ListScheduledEventsErrorResponse struct {
	Details []ListScheduledEventsErrorResponseDetails `json:"details,omitempty"`
	Message string                                    `json:"message"`
	Title   string                                    `json:"title"`
}

// ListScheduledEvents200ApplicationJSON - Service response
type ListScheduledEvents200ApplicationJSON struct {
	// The set of scheduled events matching the criteria
	Collection []shared.Event    `json:"collection"`
	Pagination shared.Pagination `json:"pagination"`
}

type ListScheduledEventsResponse struct {
	ContentType string
	// Request is not valid
	ErrorResponse *ListScheduledEventsErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// OK
	ListScheduledEvents200ApplicationJSONObject *ListScheduledEvents200ApplicationJSON
	// Permission Denied
	ListScheduledEvents403ApplicationJSONObject *ListScheduledEvents403ApplicationJSON
}
