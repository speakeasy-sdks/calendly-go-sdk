// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package operations

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/calendly-go-sdk/pkg/models/shared"
	"net/http"
)

// GetScheduledEventsStatusEnum - Whether the scheduled event is `active` or `canceled`
type GetScheduledEventsStatusEnum string

const (
	GetScheduledEventsStatusEnumActive   GetScheduledEventsStatusEnum = "active"
	GetScheduledEventsStatusEnumCanceled GetScheduledEventsStatusEnum = "canceled"
)

func (e *GetScheduledEventsStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "active":
		fallthrough
	case "canceled":
		*e = GetScheduledEventsStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScheduledEventsStatusEnum: %s", s)
	}
}

type GetScheduledEventsRequest struct {
	// The number of rows to return
	Count *float64 `queryParam:"style=form,explode=true,name=count"`
	// Return events that are scheduled with the invitee associated with this email address
	InviteeEmail *string `queryParam:"style=form,explode=true,name=invitee_email"`
	// Include events with start times prior to this time (sample time format: "2020-01-02T03:04:05.678123Z"). This time should use the UTC timezone.
	MaxStartTime *string `queryParam:"style=form,explode=true,name=max_start_time"`
	// Include events with start times after this time (sample time format: "2020-01-02T03:04:05.678123Z"). This time should use the UTC timezone.
	MinStartTime *string `queryParam:"style=form,explode=true,name=min_start_time"`
	// Return events that are scheduled with the organization associated with this URI
	Organization *string `queryParam:"style=form,explode=true,name=organization"`
	// The token to pass to get the next or previous portion of the collection
	PageToken *string `queryParam:"style=form,explode=true,name=page_token"`
	// Order results by the specified field and direction. Accepts comma-separated list of {field}:{direction} values.
	// Supported fields are: start_time.
	// Sort direction is specified as: asc, desc.
	Sort *string `queryParam:"style=form,explode=true,name=sort"`
	// Whether the scheduled event is `active` or `canceled`
	Status *GetScheduledEventsStatusEnum `queryParam:"style=form,explode=true,name=status"`
	// Return events that are scheduled with the user associated with this URI
	User *string `queryParam:"style=form,explode=true,name=user"`
}

type GetScheduledEvents403ApplicationJSONMessageEnum string

const (
	GetScheduledEvents403ApplicationJSONMessageEnumYouDoNotHavePermissionToAccessThisResource                                      GetScheduledEvents403ApplicationJSONMessageEnum = "You do not have permission to access this resource."
	GetScheduledEvents403ApplicationJSONMessageEnumPleaseAlsoSpecifyOrganizationWhenRequestingEventsForAUserWithinYourOrganization GetScheduledEvents403ApplicationJSONMessageEnum = "Please also specify organization when requesting events for a user within your organization."
	GetScheduledEvents403ApplicationJSONMessageEnumThisUserIsNotInYourOrganization                                                 GetScheduledEvents403ApplicationJSONMessageEnum = "This user is not in your organization"
	GetScheduledEvents403ApplicationJSONMessageEnumYouDoNotHavePermission                                                          GetScheduledEvents403ApplicationJSONMessageEnum = "You do not have permission"
)

func (e *GetScheduledEvents403ApplicationJSONMessageEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "You do not have permission to access this resource.":
		fallthrough
	case "Please also specify organization when requesting events for a user within your organization.":
		fallthrough
	case "This user is not in your organization":
		fallthrough
	case "You do not have permission":
		*e = GetScheduledEvents403ApplicationJSONMessageEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScheduledEvents403ApplicationJSONMessageEnum: %s", s)
	}
}

type GetScheduledEvents403ApplicationJSONTitleEnum string

const (
	GetScheduledEvents403ApplicationJSONTitleEnumPermissionDenied GetScheduledEvents403ApplicationJSONTitleEnum = "Permission Denied"
)

func (e *GetScheduledEvents403ApplicationJSONTitleEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "Permission Denied":
		*e = GetScheduledEvents403ApplicationJSONTitleEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GetScheduledEvents403ApplicationJSONTitleEnum: %s", s)
	}
}

// GetScheduledEvents403ApplicationJSON - Permission Denied
type GetScheduledEvents403ApplicationJSON struct {
	Message *GetScheduledEvents403ApplicationJSONMessageEnum `json:"message,omitempty"`
	Title   *GetScheduledEvents403ApplicationJSONTitleEnum   `json:"title,omitempty"`
}

type GetScheduledEventsErrorResponseDetails struct {
	Message   string  `json:"message"`
	Parameter *string `json:"parameter,omitempty"`
}

// GetScheduledEventsErrorResponse - Error Object
type GetScheduledEventsErrorResponse struct {
	Details []GetScheduledEventsErrorResponseDetails `json:"details,omitempty"`
	Message string                                   `json:"message"`
	Title   string                                   `json:"title"`
}

// GetScheduledEvents200ApplicationJSON - Service response
type GetScheduledEvents200ApplicationJSON struct {
	// The set of scheduled events matching the criteria
	Collection []shared.Event    `json:"collection"`
	Pagination shared.Pagination `json:"pagination"`
}

type GetScheduledEventsResponse struct {
	ContentType string
	// Request is not valid
	ErrorResponse *GetScheduledEventsErrorResponse
	StatusCode    int
	RawResponse   *http.Response
	// OK
	GetScheduledEvents200ApplicationJSONObject *GetScheduledEvents200ApplicationJSON
	// Permission Denied
	GetScheduledEvents403ApplicationJSONObject *GetScheduledEvents403ApplicationJSON
}
