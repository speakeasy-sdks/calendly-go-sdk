// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type ZoomConferenceDataExtra struct {
	// Zoom International Dial-in Numbers URL
	IntlNumbersURL *string `json:"intl_numbers_url,omitempty"`
}

type ZoomConferenceDataSettingsGlobalDialInNumbers struct {
	City *string `json:"city,omitempty"`
	// Country code
	Country     *string `json:"country,omitempty"`
	CountryName *string `json:"country_name,omitempty"`
	// Phone number
	Number *string `json:"number,omitempty"`
	Type   *string `json:"type,omitempty"`
}

type ZoomConferenceDataSettings struct {
	GlobalDialInNumbers []ZoomConferenceDataSettingsGlobalDialInNumbers `json:"global_dial_in_numbers,omitempty"`
}

// ZoomConferenceData - The conference metadata supplied by Zoom
type ZoomConferenceData struct {
	Extra *ZoomConferenceDataExtra `json:"extra,omitempty"`
	// The conference ID provided by Zoom
	ID *string `json:"id,omitempty"`
	// Zoom meeting password
	Password *string                     `json:"password,omitempty"`
	Settings *ZoomConferenceDataSettings `json:"settings,omitempty"`
}

// ZoomConferenceStatusEnum - Indicates the current status of the Zoom conference
type ZoomConferenceStatusEnum string

const (
	ZoomConferenceStatusEnumInitiated  ZoomConferenceStatusEnum = "initiated"
	ZoomConferenceStatusEnumProcessing ZoomConferenceStatusEnum = "processing"
	ZoomConferenceStatusEnumPushed     ZoomConferenceStatusEnum = "pushed"
	ZoomConferenceStatusEnumFailed     ZoomConferenceStatusEnum = "failed"
)

func (e *ZoomConferenceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "initiated":
		fallthrough
	case "processing":
		fallthrough
	case "pushed":
		fallthrough
	case "failed":
		*e = ZoomConferenceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ZoomConferenceStatusEnum: %s", s)
	}
}

// ZoomConferenceTypeEnum - The event location is a Zoom conference
type ZoomConferenceTypeEnum string

const (
	ZoomConferenceTypeEnumZoomConference ZoomConferenceTypeEnum = "zoom_conference"
)

func (e *ZoomConferenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "zoom_conference":
		*e = ZoomConferenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ZoomConferenceTypeEnum: %s", s)
	}
}

// ZoomConference - Meeting will take place in a Zoom conference
type ZoomConference struct {
	// The conference metadata supplied by Zoom
	Data ZoomConferenceData `json:"data"`
	// Zoom meeting url
	JoinURL string `json:"join_url"`
	// Indicates the current status of the Zoom conference
	Status ZoomConferenceStatusEnum `json:"status"`
	// The event location is a Zoom conference
	Type ZoomConferenceTypeEnum `json:"type"`
}
