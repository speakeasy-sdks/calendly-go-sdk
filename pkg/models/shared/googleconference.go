// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

// GoogleConferenceStatusEnum - Indicates the current status of the Google conference
type GoogleConferenceStatusEnum string

const (
	GoogleConferenceStatusEnumInitiated  GoogleConferenceStatusEnum = "initiated"
	GoogleConferenceStatusEnumProcessing GoogleConferenceStatusEnum = "processing"
	GoogleConferenceStatusEnumPushed     GoogleConferenceStatusEnum = "pushed"
	GoogleConferenceStatusEnumFailed     GoogleConferenceStatusEnum = "failed"
)

func (e *GoogleConferenceStatusEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "initiated":
		fallthrough
	case "processing":
		fallthrough
	case "pushed":
		fallthrough
	case "failed":
		*e = GoogleConferenceStatusEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleConferenceStatusEnum: %s", s)
	}
}

// GoogleConferenceTypeEnum - The event location is a Google Meet or Hangouts conference
type GoogleConferenceTypeEnum string

const (
	GoogleConferenceTypeEnumGoogleConference GoogleConferenceTypeEnum = "google_conference"
)

func (e *GoogleConferenceTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "google_conference":
		*e = GoogleConferenceTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for GoogleConferenceTypeEnum: %s", s)
	}
}

// GoogleConference - Details about an Event that will take place using a Google Meet / Hangout conference
type GoogleConference struct {
	// Google conference meeting url
	JoinURL string `json:"join_url"`
	// Indicates the current status of the Google conference
	Status GoogleConferenceStatusEnum `json:"status"`
	// The event location is a Google Meet or Hangouts conference
	Type GoogleConferenceTypeEnum `json:"type"`
}
