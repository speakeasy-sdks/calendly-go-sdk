// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
	"github.com/speakeasy-sdks/calendly-go-sdk/pkg/types"
)

// ShareSchedulingLinksOwnerTypeEnum - Resource type (currently, this is always EventType)
type ShareSchedulingLinksOwnerTypeEnum string

const (
	ShareSchedulingLinksOwnerTypeEnumEventType ShareSchedulingLinksOwnerTypeEnum = "EventType"
)

func (e *ShareSchedulingLinksOwnerTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "EventType":
		*e = ShareSchedulingLinksOwnerTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareSchedulingLinksOwnerTypeEnum: %s", s)
	}
}

type ShareSchedulingLinks struct {
	// Scheduling link url
	BookingURL string `json:"booking_url"`
	// A link to the resource that owns this Scheduling Link (currently, this is always an Event Type)
	Owner *string `json:"owner,omitempty"`
	// Resource type (currently, this is always EventType)
	OwnerType *ShareSchedulingLinksOwnerTypeEnum `json:"owner_type,omitempty"`
}

type ShareShareOverrideAvailabilityRuleRulesIntervals struct {
	// Format: `"hh:mm"`
	From *string `json:"from,omitempty"`
	// Format: `"hh:mm"`
	To *string `json:"to,omitempty"`
}

type ShareShareOverrideAvailabilityRuleRulesTypeEnum string

const (
	ShareShareOverrideAvailabilityRuleRulesTypeEnumWday ShareShareOverrideAvailabilityRuleRulesTypeEnum = "wday"
	ShareShareOverrideAvailabilityRuleRulesTypeEnumDate ShareShareOverrideAvailabilityRuleRulesTypeEnum = "date"
)

func (e *ShareShareOverrideAvailabilityRuleRulesTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "wday":
		fallthrough
	case "date":
		*e = ShareShareOverrideAvailabilityRuleRulesTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareShareOverrideAvailabilityRuleRulesTypeEnum: %s", s)
	}
}

type ShareShareOverrideAvailabilityRuleRulesWdayEnum string

const (
	ShareShareOverrideAvailabilityRuleRulesWdayEnumSunday    ShareShareOverrideAvailabilityRuleRulesWdayEnum = "sunday"
	ShareShareOverrideAvailabilityRuleRulesWdayEnumMonday    ShareShareOverrideAvailabilityRuleRulesWdayEnum = "monday"
	ShareShareOverrideAvailabilityRuleRulesWdayEnumTuesday   ShareShareOverrideAvailabilityRuleRulesWdayEnum = "tuesday"
	ShareShareOverrideAvailabilityRuleRulesWdayEnumWednesday ShareShareOverrideAvailabilityRuleRulesWdayEnum = "wednesday"
	ShareShareOverrideAvailabilityRuleRulesWdayEnumThursday  ShareShareOverrideAvailabilityRuleRulesWdayEnum = "thursday"
	ShareShareOverrideAvailabilityRuleRulesWdayEnumFriday    ShareShareOverrideAvailabilityRuleRulesWdayEnum = "friday"
	ShareShareOverrideAvailabilityRuleRulesWdayEnumSaturday  ShareShareOverrideAvailabilityRuleRulesWdayEnum = "saturday"
)

func (e *ShareShareOverrideAvailabilityRuleRulesWdayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = ShareShareOverrideAvailabilityRuleRulesWdayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareShareOverrideAvailabilityRuleRulesWdayEnum: %s", s)
	}
}

type ShareShareOverrideAvailabilityRuleRules struct {
	// Format: `YYYY-MM-DD`
	Date      *types.Date                                        `json:"date,omitempty"`
	Intervals []ShareShareOverrideAvailabilityRuleRulesIntervals `json:"intervals,omitempty"`
	Type      ShareShareOverrideAvailabilityRuleRulesTypeEnum    `json:"type"`
	Wday      *ShareShareOverrideAvailabilityRuleRulesWdayEnum   `json:"wday,omitempty"`
}

type ShareShareOverrideAvailabilityRule struct {
	Rules    []ShareShareOverrideAvailabilityRuleRules `json:"rules"`
	Timezone string                                    `json:"timezone"`
}

type ShareShareOverrideLocationConfigurationsKindEnum string

const (
	ShareShareOverrideLocationConfigurationsKindEnumPhysical                 ShareShareOverrideLocationConfigurationsKindEnum = "physical"
	ShareShareOverrideLocationConfigurationsKindEnumAskInvitee               ShareShareOverrideLocationConfigurationsKindEnum = "ask_invitee"
	ShareShareOverrideLocationConfigurationsKindEnumCustom                   ShareShareOverrideLocationConfigurationsKindEnum = "custom"
	ShareShareOverrideLocationConfigurationsKindEnumOutboundCall             ShareShareOverrideLocationConfigurationsKindEnum = "outbound_call"
	ShareShareOverrideLocationConfigurationsKindEnumInboundCall              ShareShareOverrideLocationConfigurationsKindEnum = "inbound_call"
	ShareShareOverrideLocationConfigurationsKindEnumGoogleConference         ShareShareOverrideLocationConfigurationsKindEnum = "google_conference"
	ShareShareOverrideLocationConfigurationsKindEnumGotomeetingConference    ShareShareOverrideLocationConfigurationsKindEnum = "gotomeeting_conference"
	ShareShareOverrideLocationConfigurationsKindEnumMicrosoftTeamsConference ShareShareOverrideLocationConfigurationsKindEnum = "microsoft_teams_conference"
	ShareShareOverrideLocationConfigurationsKindEnumZoomConference           ShareShareOverrideLocationConfigurationsKindEnum = "zoom_conference"
)

func (e *ShareShareOverrideLocationConfigurationsKindEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "physical":
		fallthrough
	case "ask_invitee":
		fallthrough
	case "custom":
		fallthrough
	case "outbound_call":
		fallthrough
	case "inbound_call":
		fallthrough
	case "google_conference":
		fallthrough
	case "gotomeeting_conference":
		fallthrough
	case "microsoft_teams_conference":
		fallthrough
	case "zoom_conference":
		*e = ShareShareOverrideLocationConfigurationsKindEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareShareOverrideLocationConfigurationsKindEnum: %s", s)
	}
}

type ShareShareOverrideLocationConfigurations struct {
	AdditionalInfo *string                                           `json:"additional_info,omitempty"`
	Kind           *ShareShareOverrideLocationConfigurationsKindEnum `json:"kind,omitempty"`
	Location       *string                                           `json:"location,omitempty"`
	PhoneNumber    *string                                           `json:"phone_number,omitempty"`
	Position       *int64                                            `json:"position,omitempty"`
}

type ShareShareOverridePeriodTypeEnum string

const (
	ShareShareOverridePeriodTypeEnumAvailableMoving ShareShareOverridePeriodTypeEnum = "available_moving"
	ShareShareOverridePeriodTypeEnumMoving          ShareShareOverridePeriodTypeEnum = "moving"
	ShareShareOverridePeriodTypeEnumFixed           ShareShareOverridePeriodTypeEnum = "fixed"
	ShareShareOverridePeriodTypeEnumUnlimited       ShareShareOverridePeriodTypeEnum = "unlimited"
)

func (e *ShareShareOverridePeriodTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "available_moving":
		fallthrough
	case "moving":
		fallthrough
	case "fixed":
		fallthrough
	case "unlimited":
		*e = ShareShareOverridePeriodTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for ShareShareOverridePeriodTypeEnum: %s", s)
	}
}

type ShareShareOverride struct {
	AvailabilityRule *ShareShareOverrideAvailabilityRule `json:"availability_rule,omitempty"`
	Duration         *int64                              `json:"duration,omitempty"`
	// Format: `YYYY-MM-DD`
	EndDate                *types.Date                                `json:"end_date,omitempty"`
	HideLocation           *bool                                      `json:"hide_location,omitempty"`
	LocationConfigurations []ShareShareOverrideLocationConfigurations `json:"location_configurations,omitempty"`
	MaxBookingTime         *int64                                     `json:"max_booking_time,omitempty"`
	Name                   *string                                    `json:"name,omitempty"`
	PeriodType             *ShareShareOverridePeriodTypeEnum          `json:"period_type,omitempty"`
	// Format: `YYYY-MM-DD`
	StartDate *types.Date `json:"start_date,omitempty"`
}

type Share struct {
	SchedulingLinks []ShareSchedulingLinks `json:"scheduling_links"`
	ShareOverride   ShareShareOverride     `json:"share_override"`
}
