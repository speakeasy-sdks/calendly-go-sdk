// Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.

package shared

import (
	"encoding/json"
	"fmt"
)

type AvailabilityRuleIntervals struct {
	// Format: `"hh:mm"`
	From *string `json:"from,omitempty"`
	// Format: `"hh:mm"`
	To *string `json:"to,omitempty"`
}

// AvailabilityRuleTypeEnum - The type of this Availability Rule; can be "wday" or a specific "date".
type AvailabilityRuleTypeEnum string

const (
	AvailabilityRuleTypeEnumWday AvailabilityRuleTypeEnum = "wday"
	AvailabilityRuleTypeEnumDate AvailabilityRuleTypeEnum = "date"
)

func (e *AvailabilityRuleTypeEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "wday":
		fallthrough
	case "date":
		*e = AvailabilityRuleTypeEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailabilityRuleTypeEnum: %s", s)
	}
}

// AvailabilityRuleWdayEnum - The day of the week for which this Rule should be applied to.
type AvailabilityRuleWdayEnum string

const (
	AvailabilityRuleWdayEnumSunday    AvailabilityRuleWdayEnum = "sunday"
	AvailabilityRuleWdayEnumMonday    AvailabilityRuleWdayEnum = "monday"
	AvailabilityRuleWdayEnumTuesday   AvailabilityRuleWdayEnum = "tuesday"
	AvailabilityRuleWdayEnumWednesday AvailabilityRuleWdayEnum = "wednesday"
	AvailabilityRuleWdayEnumThursday  AvailabilityRuleWdayEnum = "thursday"
	AvailabilityRuleWdayEnumFriday    AvailabilityRuleWdayEnum = "friday"
	AvailabilityRuleWdayEnumSaturday  AvailabilityRuleWdayEnum = "saturday"
)

func (e *AvailabilityRuleWdayEnum) UnmarshalJSON(data []byte) error {
	var s string
	if err := json.Unmarshal(data, &s); err != nil {
		return err
	}
	switch s {
	case "sunday":
		fallthrough
	case "monday":
		fallthrough
	case "tuesday":
		fallthrough
	case "wednesday":
		fallthrough
	case "thursday":
		fallthrough
	case "friday":
		fallthrough
	case "saturday":
		*e = AvailabilityRuleWdayEnum(s)
		return nil
	default:
		return fmt.Errorf("invalid value for AvailabilityRuleWdayEnum: %s", s)
	}
}

// AvailabilityRule - The rules for an availability schedule.
type AvailabilityRule struct {
	// A specific date in the future that this should be applied to (i.e. "2030-12-31").
	Date *string `json:"date,omitempty"`
	// The intervals to be applied to this Rule. Each interval represents when booking a meeting is allowed. If the interval array is empty, then there is no booking availability for that day. Time is in 24h format (i.e. "17:30") and local to the timezone in the Availability Schedule.
	Intervals []AvailabilityRuleIntervals `json:"intervals"`
	// The type of this Availability Rule; can be "wday" or a specific "date".
	Type AvailabilityRuleTypeEnum `json:"type"`
	// The day of the week for which this Rule should be applied to.
	Wday *AvailabilityRuleWdayEnum `json:"wday,omitempty"`
}
